CREATE TABLE customers_dataset (
	customer_id UUID,
	customer_unique_id UUID,
	customer_zip_code_prefix CHAR (5),
	customer_city VARCHAR,
	customer_state CHAR(2)
)

CREATE TABLE geolocation_dataset (
	geolocation_zip_code_prefix CHAR (5),
	geolocation_lat DECIMAL,
	geolocation_lng DECIMAL,
	geolocation_city VARCHAR,
	geolocation_state CHAR(2)
)

CREATE TABLE products_dataset (
	number INT,
	product_id UUID,
	product_category_name VARCHAR,
	product_name_length DOUBLE PRECISION,
	product_description_lenght DOUBLE PRECISION,
	product_photos_qty DOUBLE PRECISION,
	product_weight_g DOUBLE PRECISION,
	product_length_cm DOUBLE PRECISION,
	product_height_cm DOUBLE PRECISION,
	product_width_cm DOUBLE PRECISION
)

CREATE TABLE sellers_dataset (
	seller_id UUID,
	seller_zip_code_prefix CHAR(5),
	seller_city VARCHAR,
	seller_state CHAR(2)
)

CREATE TABLE orders_dataset (
	order_id UUID,
	customer_id UUID,
	order_status VARCHAR,
	order_purchase_timestamp TIMESTAMP,
	order_approved_at TIMESTAMP,
	order_delivered_carrier_date TIMESTAMP,
	order_delivered_customer_date TIMESTAMP,
	order_estimated_delivery_date TIMESTAMP
)

CREATE TABLE order_items_dataset (
	order_id UUID,
	order_item_id INT,
	product_id UUID,
	seller_id UUID,
	shipping_limit_time TIMESTAMP,
	price DOUBLE PRECISION,
	freight_value DOUBLE PRECISION
)

CREATE TABLE order_payments_dataset (
	order_id UUID,
	payment_sequential INT,
	payment_type VARCHAR,
	payment_installments INT,
	payment_value DOUBLE PRECISION
)

CREATE TABLE order_reviews_dataset(
	review_id UUID,
	order_id UUID,
	review_score INT,
	review_comment_title VARCHAR,
	review_comment_message TEXT,
	review_creation_date TIMESTAMP,
	review_answer_timestamp TIMESTAMP
);



-- MENENTUKAN PRIMARY KEY
ALTER TABLE customers_dataset ADD CONSTRAINT PK_customer_id PRIMARY KEY (customer_id);
ALTER TABLE products_dataset ADD CONSTRAINT PK_product_id PRIMARY KEY (product_id);
ALTER TABLE sellers_dataset ADD CONSTRAINT PK_seller_id PRIMARY KEY (seller_id);
ALTER TABLE orders_dataset ADD CONSTRAINT PK_order_id PRIMARY KEY (order_id);

ALTER TABLE geolocation_dataset ALTER COLUMN geolocation_zip_code_prefix SET NOT NULL;
ALTER TABLE order_items_dataset ALTER COLUMN order_item_id SET NOT NULL;
ALTER TABLE order_reviews_dataset ALTER COLUMN review_id SET NOT NULL;

ALTER TABLE orders_dataset ADD CONSTRAINT FK_customer_id
FOREIGN KEY (customer_id) REFERENCES customers_dataset(customer_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE order_items_dataset
ADD CONSTRAINT FK_seller_id FOREIGN KEY (seller_id) REFERENCES sellers_dataset(seller_id)
ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT FK_product_id FOREIGN KEY (product_id) REFERENCES products_dataset(product_id)
ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT FK_order_id FOREIGN KEY (order_id) REFERENCES orders_dataset(order_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE order_reviews_dataset ADD CONSTRAINT FK_order_id
FOREIGN KEY (order_id) REFERENCES orders_dataset(order_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE order_payments_dataset ADD CONSTRAINT FK_order_id
FOREIGN KEY (order_id) REFERENCES orders_dataset(order_id)
ON DELETE CASCADE ON UPDATE CASCADE;

SELECT * FROM customers_dataset;


select year, round(avg(total_customer),0) as avg_active_user
from
(select date_part('year', od.order_purchase_timestamp) as year,
 		date_part('month', od.order_purchase_timestamp) as month,
 		count(distinct cd.customer_unique_id) as total_customer
from orders_dataset as od
join customers_dataset as cd on od.customer_id = cd.customer_id
group by 1,2) a
group by 1;


SELECT
			tahun,
			ROUND(AVG(active_user), 3) AS rata_rata_mau
		FROM(
			SELECT
				DATE_PART('year', orders.order_purchase_timestamp) AS tahun,
				DATE_PART('month', orders.order_purchase_timestamp) AS bulan,
				COUNT(DISTINCT customers.customer_unique_id) AS active_user
			FROM
				orders_dataset AS orders 
			JOIN customers_dataset AS customers
				ON orders.customer_id = customers.customer_id
			GROUP BY 1,2 
		) monthly_active_user
		GROUP BY 1
		ORDER BY 1
		
new_customer_data AS (
		SELECT
			DATE_PART('year', first_transaction) AS tahun,
			COUNT(DISTINCT customer) AS new_customer
		FROM (
			SELECT
				customers.customer_unique_id AS customer,
				MIN(orders.order_purchase_timestamp) AS first_transaction
			FROM
				orders_dataset AS orders 
			JOIN customers_dataset AS customers
				ON orders.customer_id = customers.customer_id
			GROUP BY 1
		) transactions
		GROUP BY 1
		ORDER BY 1
	),